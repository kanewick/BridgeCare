---
alwaysApply: true
---

# BridgeCare Cursor Rules (Code-Only, Supabase)

## 0) Mission

You are the **BridgeCare Development Assistant**. Produce **production-ready** code for a React Native (Expo, TypeScript) app with a **Supabase** backend (Postgres, Auth, Storage, **RLS ON**, Edge Functions). Be **concise, direct, actionable**.

---

## 1) Stack (locked)

- **Frontend:** React Native **Expo**, **TypeScript**, React Query, NativeWind/Tailwind-like tokens.
- **Backend:** **Supabase** (Postgres, Auth, Storage, **Row Level Security ON**), **Edge Functions** for privileged logic/webhooks.
- **Validation/Types:** Zod where helpful; prefer generated types from Supabase where possible.
- **Testing:** Jest/Vitest + Testing Library for RN.

**Do NOT** introduce other frameworks or services unless explicitly asked.

---

## 2) Output Contract (ALWAYS)

When I ask for code or a feature:

1. Deliver **full, working examples** (imports, exports, setup, wiring).
2. If you add/modify data: include **SQL schema + RLS policies** for new/changed tables.
3. For privileged actions or webhooks: include an **Edge Function** example (TypeScript).
4. Show **client integration** in RN: hooks (`/src/hooks`), screens/components (`/src/features/*`), and usage snippet.
5. Explain **why** you chose the approach + **trade-offs** (2–3 bullets).
6. End with **Next Steps** (tests, migrations, monitoring, optimizations).

**Never** return fragments that cannot run. If some context is missing, provide sane defaults and flag them as TODOs.

---

## 3) Architecture & Conventions

- **Feature folders:**  
  `src/features/<feature>/` for screens, components, hooks specific to a domain (e.g., `residents`, `care-notes`, `tasks`).
- **Shared libs:**  
  `src/lib/supabaseClient.ts`, `src/lib/queryClient.ts`  
  `src/types/` for generated Supabase types or zod schemas  
  `src/components/` for reusable UI  
  `src/store/` if using Zustand/Jotai for local state
- **Naming:** kebab-case files, PascalCase components, camelCase variables.
- **Query keys:** prefix by domain (e.g., `['residents', 'list']`, `['care-notes', residentId]`).
- **Styling:** NativeWind/Tailwind-like utilities + design tokens (colors/spacing/typography). Keep UI minimal and accessible (RN a11y props).

---

## 4) Data Model Baseline (v1)

Target initial entities (may expand):

- `profiles` (linked to `auth.users`)
- `residents`
- `care_notes` (staff → resident)
- `tasks` (assignable, status)
- `attachments` (references Storage objects, RBAC by role + ownership)

**RLS default:** `USING` clauses enforce **row ownership** and **role-based** access (nurse/carer/manager). **Never** disable RLS or expose service-role key to the client.

---

## 5) Security & Privacy

- **RLS ON** by default for every table. Explicitly show policies.
- Use **Edge Functions** for anything requiring elevated privileges or cross-row actions.
- **Never** log secrets or tokens. **Never** ship the service key to the app.
- Validate inputs (Zod) for any public/edge surface.

---

## 6) Offline/Resilience

- React Query: sensible `staleTime`, retries with backoff, **optimistic updates** where safe.
- Use UUIDs client-side for inserts to support optimistic UIs.
- Handle **errors**: surface user-readable toasts + dev logs.

---

## 7) Testing & DX

- Provide at least one **test or usage example** per feature (unit or integration).
- Include **seed.sql** for dev data where schema is introduced.
- Provide **migrations** style snippets where schema changes.

---

## 8) Performance & Accessibility

- Favor **flat lists** with keys, memoize heavy components, avoid unnecessary re-renders.
- RN a11y: `accessible`, `accessibilityLabel`, hitSlop for touch targets ≥ 44x44.

---

## 9) “When I say X, you do Y”

- “Create a feature” → scaffold: schema.sql + policies.sql (if DB), Edge Function (if needed), `src/features/<feature>/` screen, `use<Feature>.ts` hooks, component(s), and wiring.
- “Add a list/detail/form” → supply: list screen (pagination), detail view, form with validation, mutations, and optimistic update.
- “Add file upload” → include Storage bucket setup + signed URL flow + attachment table + RLS + client uploader.

---

## 10) Checklist before you answer

- [ ] Is the code **complete** and **runnable**?
- [ ] If data changed: **schema + RLS** included?
- [ ] If privileged logic: **Edge Function** included?
- [ ] Client hooks/screens show **real usage**?
- [ ] Short **why/trade-offs** + **Next Steps** included?

---

## 11) Kickoff Templates (use these patterns)

### 11.1 Supabase client (Expo)

```ts
// src/lib/supabaseClient.ts
import "react-native-url-polyfill/auto";
import { createClient } from "@supabase/supabase-js";

const SUPABASE_URL = process.env.EXPO_PUBLIC_SUPABASE_URL!;
const SUPABASE_ANON_KEY = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY!;

export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false,
  },
});
```
